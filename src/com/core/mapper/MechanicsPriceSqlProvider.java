package com.core.mapper;

import com.core.entity.MechanicsPrice;
import com.core.entity.MechanicsPriceExample.Criteria;
import com.core.entity.MechanicsPriceExample.Criterion;
import com.core.util.Utils;
import com.core.entity.MechanicsPriceExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class MechanicsPriceSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String countByExample(MechanicsPriceExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("mechanics_price");
		applyWhere(sql, example, false);
		return sql.toString();
	}
	public String sumPriceByExample(MechanicsPriceExample example) {
		SQL sql = new SQL();
		sql.SELECT("sum(price)").FROM(Utils.getDatabase()+".mechanics_price");
		applyWhere(sql, example, false);
		return sql.toString();
	}
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String deleteByExample(MechanicsPriceExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("mechanics_price");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String insertSelective(MechanicsPrice record) {
		SQL sql = new SQL();
		sql.INSERT_INTO(Utils.getDatabase()+".mechanics_price");
		if (record.getId() != null) {
			sql.VALUES("id", "#{id,jdbcType=INTEGER}");
		}
		if (record.getProject() != null) {
			sql.VALUES("project", "#{project,jdbcType=INTEGER}");
		}
		if (record.getProgram() != null) {
			sql.VALUES("program", "#{program,jdbcType=VARCHAR}");
		}
		if (record.getNode() != null) {
			sql.VALUES("node", "#{node,jdbcType=VARCHAR}");
		}
		if (record.getIprocedure() != null) {
			sql.VALUES("iprocedure", "#{iprocedure,jdbcType=VARCHAR}");
		}
		if (record.getMechanic() != null) {
			sql.VALUES("mechanic", "#{mechanic,jdbcType=INTEGER}");
		}
		if (record.getMechanicName() != null) {
			sql.VALUES("mechanic_name", "#{mechanicName,jdbcType=VARCHAR}");
		}
		if (record.getDriverName() != null) {
			sql.VALUES("driver_name", "#{driverName,jdbcType=VARCHAR}");
		}
		if (record.getPlateNumber() != null) {
			sql.VALUES("plate_number", "#{plateNumber,jdbcType=VARCHAR}");
		}
		if (record.getBaseType() != null) {
			sql.VALUES("base_type", "#{baseType,jdbcType=VARCHAR}");
		}
		if (record.getIcount() != null) {
			sql.VALUES("icount", "#{icount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null) {
			sql.VALUES("unit_price", "#{unitPrice,jdbcType=INTEGER}");
		}
		if (record.getUnitPriceType() != null) {
			sql.VALUES("unit_price_type", "#{unitPriceType,jdbcType=VARCHAR}");
		}
		if (record.getDate() != null) {
			sql.VALUES("date", "#{date,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.VALUES("create_date", "#{createDate,jdbcType=VARCHAR}");
		}
		if (record.getStaffName() != null) {
			sql.VALUES("staff_name", "#{staffName,jdbcType=VARCHAR}");
		}
		if (record.getStaff() != null) {
			sql.VALUES("staff", "#{staff,jdbcType=INTEGER}");
		}
		if (record.getPrice() != null) {
			sql.VALUES("price", "#{price,jdbcType=INTEGER}");
		}
		if (record.getRemark() != null) {
			sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String selectByExample(MechanicsPriceExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("project");
		sql.SELECT("program");
		sql.SELECT("node");
		sql.SELECT("iprocedure");
		sql.SELECT("mechanic");
		sql.SELECT("mechanic_name");
		sql.SELECT("driver_name");
		sql.SELECT("plate_number");
		sql.SELECT("base_type");
		sql.SELECT("icount");
		sql.SELECT("unit_price");
		sql.SELECT("unit_price_type");
		sql.SELECT("date");
		sql.SELECT("create_date");
		sql.SELECT("staff_name");
		sql.SELECT("staff");
		sql.SELECT("price");
		sql.SELECT("remark");
		sql.FROM(Utils.getDatabase()+".mechanics_price");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		MechanicsPrice record = (MechanicsPrice) parameter.get("record");
		MechanicsPriceExample example = (MechanicsPriceExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("mechanics_price");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getProject() != null) {
			sql.SET("project = #{record.project,jdbcType=INTEGER}");
		}
		if (record.getProgram() != null) {
			sql.SET("program = #{record.program,jdbcType=VARCHAR}");
		}
		if (record.getNode() != null) {
			sql.SET("node = #{record.node,jdbcType=VARCHAR}");
		}
		if (record.getIprocedure() != null) {
			sql.SET("iprocedure = #{record.iprocedure,jdbcType=VARCHAR}");
		}
		if (record.getMechanic() != null) {
			sql.SET("mechanic = #{record.mechanic,jdbcType=INTEGER}");
		}
		if (record.getMechanicName() != null) {
			sql.SET("mechanic_name = #{record.mechanicName,jdbcType=VARCHAR}");
		}
		if (record.getDriverName() != null) {
			sql.SET("driver_name = #{record.driverName,jdbcType=VARCHAR}");
		}
		if (record.getPlateNumber() != null) {
			sql.SET("plate_number = #{record.plateNumber,jdbcType=VARCHAR}");
		}
		if (record.getBaseType() != null) {
			sql.SET("base_type = #{record.baseType,jdbcType=VARCHAR}");
		}
		if (record.getIcount() != null) {
			sql.SET("icount = #{record.icount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null) {
			sql.SET("unit_price = #{record.unitPrice,jdbcType=INTEGER}");
		}
		if (record.getUnitPriceType() != null) {
			sql.SET("unit_price_type = #{record.unitPriceType,jdbcType=VARCHAR}");
		}
		if (record.getDate() != null) {
			sql.SET("date = #{record.date,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
		}
		if (record.getStaffName() != null) {
			sql.SET("staff_name = #{record.staffName,jdbcType=VARCHAR}");
		}
		if (record.getStaff() != null) {
			sql.SET("staff = #{record.staff,jdbcType=INTEGER}");
		}
		if (record.getPrice() != null) {
			sql.SET("price = #{record.price,jdbcType=INTEGER}");
		}
		if (record.getRemark() != null) {
			sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("mechanics_price");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("project = #{record.project,jdbcType=INTEGER}");
		sql.SET("program = #{record.program,jdbcType=VARCHAR}");
		sql.SET("node = #{record.node,jdbcType=VARCHAR}");
		sql.SET("iprocedure = #{record.iprocedure,jdbcType=VARCHAR}");
		sql.SET("mechanic = #{record.mechanic,jdbcType=INTEGER}");
		sql.SET("mechanic_name = #{record.mechanicName,jdbcType=VARCHAR}");
		sql.SET("driver_name = #{record.driverName,jdbcType=VARCHAR}");
		sql.SET("plate_number = #{record.plateNumber,jdbcType=VARCHAR}");
		sql.SET("base_type = #{record.baseType,jdbcType=VARCHAR}");
		sql.SET("icount = #{record.icount,jdbcType=INTEGER}");
		sql.SET("unit_price = #{record.unitPrice,jdbcType=INTEGER}");
		sql.SET("unit_price_type = #{record.unitPriceType,jdbcType=VARCHAR}");
		sql.SET("date = #{record.date,jdbcType=VARCHAR}");
		sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
		sql.SET("staff_name = #{record.staffName,jdbcType=VARCHAR}");
		sql.SET("staff = #{record.staff,jdbcType=INTEGER}");
		sql.SET("price = #{record.price,jdbcType=INTEGER}");
		sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
		MechanicsPriceExample example = (MechanicsPriceExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	public String updateByPrimaryKeySelective(MechanicsPrice record) {
		SQL sql = new SQL();
		sql.UPDATE("mechanics_price");
		if (record.getProject() != null) {
			sql.SET("project = #{project,jdbcType=INTEGER}");
		}
		if (record.getProgram() != null) {
			sql.SET("program = #{program,jdbcType=VARCHAR}");
		}
		if (record.getNode() != null) {
			sql.SET("node = #{node,jdbcType=VARCHAR}");
		}
		if (record.getIprocedure() != null) {
			sql.SET("iprocedure = #{iprocedure,jdbcType=VARCHAR}");
		}
		if (record.getMechanic() != null) {
			sql.SET("mechanic = #{mechanic,jdbcType=INTEGER}");
		}
		if (record.getMechanicName() != null) {
			sql.SET("mechanic_name = #{mechanicName,jdbcType=VARCHAR}");
		}
		if (record.getDriverName() != null) {
			sql.SET("driver_name = #{driverName,jdbcType=VARCHAR}");
		}
		if (record.getPlateNumber() != null) {
			sql.SET("plate_number = #{plateNumber,jdbcType=VARCHAR}");
		}
		if (record.getBaseType() != null) {
			sql.SET("base_type = #{baseType,jdbcType=VARCHAR}");
		}
		if (record.getIcount() != null) {
			sql.SET("icount = #{icount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null) {
			sql.SET("unit_price = #{unitPrice,jdbcType=INTEGER}");
		}
		if (record.getUnitPriceType() != null) {
			sql.SET("unit_price_type = #{unitPriceType,jdbcType=VARCHAR}");
		}
		if (record.getDate() != null) {
			sql.SET("date = #{date,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{createDate,jdbcType=VARCHAR}");
		}
		if (record.getStaffName() != null) {
			sql.SET("staff_name = #{staffName,jdbcType=VARCHAR}");
		}
		if (record.getStaff() != null) {
			sql.SET("staff = #{staff,jdbcType=INTEGER}");
		}
		if (record.getPrice() != null) {
			sql.SET("price = #{price,jdbcType=INTEGER}");
		}
		if (record.getRemark() != null) {
			sql.SET("remark = #{remark,jdbcType=VARCHAR}");
		}
		sql.WHERE("id = #{id,jdbcType=INTEGER}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table mechanics_price
	 * @mbg.generated  Thu Jan 25 10:11:12 CST 2018
	 */
	protected void applyWhere(SQL sql, MechanicsPriceExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
	

}