package com.core.mapper;

import com.core.entity.Xianghan;
import com.core.entity.XianghanExample.Criteria;
import com.core.entity.XianghanExample.Criterion;
import com.core.util.Utils;
import com.core.entity.XianghanExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class XianghanSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String countByExample(XianghanExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("xianghan");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String deleteByExample(XianghanExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("xianghan");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String insertSelective(Xianghan record) {
		SQL sql = new SQL();
		sql.INSERT_INTO(Utils.getDatabase()+".xianghan");
		if (record.getId() != null) {
			sql.VALUES("id", "#{id,jdbcType=INTEGER}");
		}
		if (record.getProject() != null) {
			sql.VALUES("project", "#{project,jdbcType=INTEGER}");
		}
		if (record.getNode() != null) {
			sql.VALUES("node", "#{node,jdbcType=INTEGER}");
		}
		if (record.getChildnode() != null) {
			sql.VALUES("childNode", "#{childnode,jdbcType=INTEGER}");
		}
		if (record.getCol2() != null) {
			sql.VALUES("col2", "#{col2,jdbcType=VARCHAR}");
		}
		if (record.getCol3() != null) {
			sql.VALUES("col3", "#{col3,jdbcType=VARCHAR}");
		}
		if (record.getCol4() != null) {
			sql.VALUES("col4", "#{col4,jdbcType=VARCHAR}");
		}
		if (record.getCol5() != null) {
			sql.VALUES("col5", "#{col5,jdbcType=VARCHAR}");
		}
		if (record.getCol6() != null) {
			sql.VALUES("col6", "#{col6,jdbcType=VARCHAR}");
		}
		if (record.getCol7() != null) {
			sql.VALUES("col7", "#{col7,jdbcType=VARCHAR}");
		}
		if (record.getCol8() != null) {
			sql.VALUES("col8", "#{col8,jdbcType=VARCHAR}");
		}
		if (record.getCol9() != null) {
			sql.VALUES("col9", "#{col9,jdbcType=VARCHAR}");
		}
		if (record.getCol10() != null) {
			sql.VALUES("col10", "#{col10,jdbcType=VARCHAR}");
		}
		if (record.getCol11() != null) {
			sql.VALUES("col11", "#{col11,jdbcType=VARCHAR}");
		}
		if (record.getCol12() != null) {
			sql.VALUES("col12", "#{col12,jdbcType=VARCHAR}");
		}
		if (record.getCol13() != null) {
			sql.VALUES("col13", "#{col13,jdbcType=VARCHAR}");
		}
		if (record.getCol14() != null) {
			sql.VALUES("col14", "#{col14,jdbcType=VARCHAR}");
		}
		if (record.getCol15() != null) {
			sql.VALUES("col15", "#{col15,jdbcType=VARCHAR}");
		}
		if (record.getCol16() != null) {
			sql.VALUES("col16", "#{col16,jdbcType=VARCHAR}");
		}
		if (record.getCol17() != null) {
			sql.VALUES("col17", "#{col17,jdbcType=VARCHAR}");
		}
		if (record.getCol18() != null) {
			sql.VALUES("col18", "#{col18,jdbcType=VARCHAR}");
		}
		if (record.getCol19() != null) {
			sql.VALUES("col19", "#{col19,jdbcType=VARCHAR}");
		}
		if (record.getCol20() != null) {
			sql.VALUES("col20", "#{col20,jdbcType=VARCHAR}");
		}
		if (record.getCol21() != null) {
			sql.VALUES("col21", "#{col21,jdbcType=VARCHAR}");
		}
		if (record.getCol22() != null) {
			sql.VALUES("col22", "#{col22,jdbcType=VARCHAR}");
		}
		if (record.getCol23() != null) {
			sql.VALUES("col23", "#{col23,jdbcType=VARCHAR}");
		}
		if (record.getCol24() != null) {
			sql.VALUES("col24", "#{col24,jdbcType=VARCHAR}");
		}
		if (record.getCol25() != null) {
			sql.VALUES("col25", "#{col25,jdbcType=VARCHAR}");
		}
		if (record.getCol26() != null) {
			sql.VALUES("col26", "#{col26,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.VALUES("create_date", "#{createDate,jdbcType=VARCHAR}");
		}
		if (record.getRemark() != null) {
			sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String selectByExample(XianghanExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("project");
		sql.SELECT("node");
		sql.SELECT("childNode");
		sql.SELECT("col2");
		sql.SELECT("col3");
		sql.SELECT("col4");
		sql.SELECT("col5");
		sql.SELECT("col6");
		sql.SELECT("col7");
		sql.SELECT("col8");
		sql.SELECT("col9");
		sql.SELECT("col10");
		sql.SELECT("col11");
		sql.SELECT("col12");
		sql.SELECT("col13");
		sql.SELECT("col14");
		sql.SELECT("col15");
		sql.SELECT("col16");
		sql.SELECT("col17");
		sql.SELECT("col18");
		sql.SELECT("col19");
		sql.SELECT("col20");
		sql.SELECT("col21");
		sql.SELECT("col22");
		sql.SELECT("col23");
		sql.SELECT("col24");
		sql.SELECT("col25");
		sql.SELECT("col26");
		sql.SELECT("create_date");
		sql.SELECT("remark");
		sql.FROM(Utils.getDatabase()+".xianghan");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Xianghan record = (Xianghan) parameter.get("record");
		XianghanExample example = (XianghanExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE(Utils.getDatabase()+".xianghan");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getProject() != null) {
			sql.SET("project = #{record.project,jdbcType=INTEGER}");
		}
		if (record.getNode() != null) {
			sql.SET("node = #{record.node,jdbcType=INTEGER}");
		}
		if (record.getChildnode() != null) {
			sql.SET("childNode = #{record.childnode,jdbcType=INTEGER}");
		}
		if (record.getCol2() != null) {
			sql.SET("col2 = #{record.col2,jdbcType=VARCHAR}");
		}
		if (record.getCol3() != null) {
			sql.SET("col3 = #{record.col3,jdbcType=VARCHAR}");
		}
		if (record.getCol4() != null) {
			sql.SET("col4 = #{record.col4,jdbcType=VARCHAR}");
		}
		if (record.getCol5() != null) {
			sql.SET("col5 = #{record.col5,jdbcType=VARCHAR}");
		}
		if (record.getCol6() != null) {
			sql.SET("col6 = #{record.col6,jdbcType=VARCHAR}");
		}
		if (record.getCol7() != null) {
			sql.SET("col7 = #{record.col7,jdbcType=VARCHAR}");
		}
		if (record.getCol8() != null) {
			sql.SET("col8 = #{record.col8,jdbcType=VARCHAR}");
		}
		if (record.getCol9() != null) {
			sql.SET("col9 = #{record.col9,jdbcType=VARCHAR}");
		}
		if (record.getCol10() != null) {
			sql.SET("col10 = #{record.col10,jdbcType=VARCHAR}");
		}
		if (record.getCol11() != null) {
			sql.SET("col11 = #{record.col11,jdbcType=VARCHAR}");
		}
		if (record.getCol12() != null) {
			sql.SET("col12 = #{record.col12,jdbcType=VARCHAR}");
		}
		if (record.getCol13() != null) {
			sql.SET("col13 = #{record.col13,jdbcType=VARCHAR}");
		}
		if (record.getCol14() != null) {
			sql.SET("col14 = #{record.col14,jdbcType=VARCHAR}");
		}
		if (record.getCol15() != null) {
			sql.SET("col15 = #{record.col15,jdbcType=VARCHAR}");
		}
		if (record.getCol16() != null) {
			sql.SET("col16 = #{record.col16,jdbcType=VARCHAR}");
		}
		if (record.getCol17() != null) {
			sql.SET("col17 = #{record.col17,jdbcType=VARCHAR}");
		}
		if (record.getCol18() != null) {
			sql.SET("col18 = #{record.col18,jdbcType=VARCHAR}");
		}
		if (record.getCol19() != null) {
			sql.SET("col19 = #{record.col19,jdbcType=VARCHAR}");
		}
		if (record.getCol20() != null) {
			sql.SET("col20 = #{record.col20,jdbcType=VARCHAR}");
		}
		if (record.getCol21() != null) {
			sql.SET("col21 = #{record.col21,jdbcType=VARCHAR}");
		}
		if (record.getCol22() != null) {
			sql.SET("col22 = #{record.col22,jdbcType=VARCHAR}");
		}
		if (record.getCol23() != null) {
			sql.SET("col23 = #{record.col23,jdbcType=VARCHAR}");
		}
		if (record.getCol24() != null) {
			sql.SET("col24 = #{record.col24,jdbcType=VARCHAR}");
		}
		if (record.getCol25() != null) {
			sql.SET("col25 = #{record.col25,jdbcType=VARCHAR}");
		}
		if (record.getCol26() != null) {
			sql.SET("col26 = #{record.col26,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
		}
		if (record.getRemark() != null) {
			sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE(Utils.getDatabase()+".xianghan");
		sql.SET("id = #{record.id,jdbcType=INTEGER}");
		sql.SET("project = #{record.project,jdbcType=INTEGER}");
		sql.SET("node = #{record.node,jdbcType=INTEGER}");
		sql.SET("childNode = #{record.childnode,jdbcType=INTEGER}");
		sql.SET("col2 = #{record.col2,jdbcType=VARCHAR}");
		sql.SET("col3 = #{record.col3,jdbcType=VARCHAR}");
		sql.SET("col4 = #{record.col4,jdbcType=VARCHAR}");
		sql.SET("col5 = #{record.col5,jdbcType=VARCHAR}");
		sql.SET("col6 = #{record.col6,jdbcType=VARCHAR}");
		sql.SET("col7 = #{record.col7,jdbcType=VARCHAR}");
		sql.SET("col8 = #{record.col8,jdbcType=VARCHAR}");
		sql.SET("col9 = #{record.col9,jdbcType=VARCHAR}");
		sql.SET("col10 = #{record.col10,jdbcType=VARCHAR}");
		sql.SET("col11 = #{record.col11,jdbcType=VARCHAR}");
		sql.SET("col12 = #{record.col12,jdbcType=VARCHAR}");
		sql.SET("col13 = #{record.col13,jdbcType=VARCHAR}");
		sql.SET("col14 = #{record.col14,jdbcType=VARCHAR}");
		sql.SET("col15 = #{record.col15,jdbcType=VARCHAR}");
		sql.SET("col16 = #{record.col16,jdbcType=VARCHAR}");
		sql.SET("col17 = #{record.col17,jdbcType=VARCHAR}");
		sql.SET("col18 = #{record.col18,jdbcType=VARCHAR}");
		sql.SET("col19 = #{record.col19,jdbcType=VARCHAR}");
		sql.SET("col20 = #{record.col20,jdbcType=VARCHAR}");
		sql.SET("col21 = #{record.col21,jdbcType=VARCHAR}");
		sql.SET("col22 = #{record.col22,jdbcType=VARCHAR}");
		sql.SET("col23 = #{record.col23,jdbcType=VARCHAR}");
		sql.SET("col24 = #{record.col24,jdbcType=VARCHAR}");
		sql.SET("col25 = #{record.col25,jdbcType=VARCHAR}");
		sql.SET("col26 = #{record.col26,jdbcType=VARCHAR}");
		sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
		sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
		XianghanExample example = (XianghanExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	public String updateByPrimaryKeySelective(Xianghan record) {
		SQL sql = new SQL();
		sql.UPDATE(Utils.getDatabase()+".xianghan");
		if (record.getProject() != null) {
			sql.SET("project = #{project,jdbcType=INTEGER}");
		}
		if (record.getNode() != null) {
			sql.SET("node = #{node,jdbcType=INTEGER}");
		}
		if (record.getChildnode() != null) {
			sql.SET("childNode = #{childnode,jdbcType=INTEGER}");
		}
		if (record.getCol2() != null) {
			sql.SET("col2 = #{col2,jdbcType=VARCHAR}");
		}
		if (record.getCol3() != null) {
			sql.SET("col3 = #{col3,jdbcType=VARCHAR}");
		}
		if (record.getCol4() != null) {
			sql.SET("col4 = #{col4,jdbcType=VARCHAR}");
		}
		if (record.getCol5() != null) {
			sql.SET("col5 = #{col5,jdbcType=VARCHAR}");
		}
		if (record.getCol6() != null) {
			sql.SET("col6 = #{col6,jdbcType=VARCHAR}");
		}
		if (record.getCol7() != null) {
			sql.SET("col7 = #{col7,jdbcType=VARCHAR}");
		}
		if (record.getCol8() != null) {
			sql.SET("col8 = #{col8,jdbcType=VARCHAR}");
		}
		if (record.getCol9() != null) {
			sql.SET("col9 = #{col9,jdbcType=VARCHAR}");
		}
		if (record.getCol10() != null) {
			sql.SET("col10 = #{col10,jdbcType=VARCHAR}");
		}
		if (record.getCol11() != null) {
			sql.SET("col11 = #{col11,jdbcType=VARCHAR}");
		}
		if (record.getCol12() != null) {
			sql.SET("col12 = #{col12,jdbcType=VARCHAR}");
		}
		if (record.getCol13() != null) {
			sql.SET("col13 = #{col13,jdbcType=VARCHAR}");
		}
		if (record.getCol14() != null) {
			sql.SET("col14 = #{col14,jdbcType=VARCHAR}");
		}
		if (record.getCol15() != null) {
			sql.SET("col15 = #{col15,jdbcType=VARCHAR}");
		}
		if (record.getCol16() != null) {
			sql.SET("col16 = #{col16,jdbcType=VARCHAR}");
		}
		if (record.getCol17() != null) {
			sql.SET("col17 = #{col17,jdbcType=VARCHAR}");
		}
		if (record.getCol18() != null) {
			sql.SET("col18 = #{col18,jdbcType=VARCHAR}");
		}
		if (record.getCol19() != null) {
			sql.SET("col19 = #{col19,jdbcType=VARCHAR}");
		}
		if (record.getCol20() != null) {
			sql.SET("col20 = #{col20,jdbcType=VARCHAR}");
		}
		if (record.getCol21() != null) {
			sql.SET("col21 = #{col21,jdbcType=VARCHAR}");
		}
		if (record.getCol22() != null) {
			sql.SET("col22 = #{col22,jdbcType=VARCHAR}");
		}
		if (record.getCol23() != null) {
			sql.SET("col23 = #{col23,jdbcType=VARCHAR}");
		}
		if (record.getCol24() != null) {
			sql.SET("col24 = #{col24,jdbcType=VARCHAR}");
		}
		if (record.getCol25() != null) {
			sql.SET("col25 = #{col25,jdbcType=VARCHAR}");
		}
		if (record.getCol26() != null) {
			sql.SET("col26 = #{col26,jdbcType=VARCHAR}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{createDate,jdbcType=VARCHAR}");
		}
		if (record.getRemark() != null) {
			sql.SET("remark = #{remark,jdbcType=VARCHAR}");
		}
		sql.WHERE("id = #{id,jdbcType=INTEGER}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table xianghan
	 * @mbg.generated  Wed Jan 17 19:31:18 CST 2018
	 */
	protected void applyWhere(SQL sql, XianghanExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}