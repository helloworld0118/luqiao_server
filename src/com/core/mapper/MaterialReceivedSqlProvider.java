package com.core.mapper;

import com.core.entity.MaterialReceived;
import com.core.entity.MaterialReceivedExample.Criteria;
import com.core.entity.MaterialReceivedExample.Criterion;
import com.core.util.Utils;
import com.core.entity.MaterialReceivedExample;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.jdbc.SQL;

public class MaterialReceivedSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String countByExample(MaterialReceivedExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("material_received");
        applyWhere(sql, example, false);
        return sql.toString();
    }
    public String sumMaterialPriceByExample(MaterialReceivedExample example) {
        SQL sql = new SQL();
        sql.SELECT("sum(material_price)").FROM("material_received");
        applyWhere(sql, example, false);
        return sql.toString();
    }
    public String sumFreightPriceByExample(MaterialReceivedExample example) {
        SQL sql = new SQL();
        sql.SELECT("sum(freight_price)").FROM("material_received");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String deleteByExample(MaterialReceivedExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("material_received");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String insertSelective(MaterialReceived record) {
        SQL sql = new SQL();
        sql.INSERT_INTO(Utils.getDatabase()+".material_received");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getProject() != null) {
            sql.VALUES("project", "#{project,jdbcType=INTEGER}");
        }
        
        if (record.getNode() != null) {
            sql.VALUES("node", "#{node,jdbcType=VARCHAR}");
        }
        
        if (record.getProgram() != null) {
            sql.VALUES("program", "#{program,jdbcType=VARCHAR}");
        }
        
        if (record.getIprocedure() != null) {
            sql.VALUES("iprocedure", "#{iprocedure,jdbcType=VARCHAR}");
        }
        
        if (record.getMechainc() != null) {
            sql.VALUES("mechainc", "#{mechainc,jdbcType=INTEGER}");
        }
        
        if (record.getSupplier() != null) {
            sql.VALUES("supplier", "#{supplier,jdbcType=INTEGER}");
        }
        
        if (record.getSupplierName() != null) {
            sql.VALUES("supplier_name", "#{supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterial() != null) {
            sql.VALUES("material", "#{material,jdbcType=INTEGER}");
        }
        
        if (record.getPlateNumber() != null) {
            sql.VALUES("plate_number", "#{plateNumber,jdbcType=VARCHAR}");
        }
        
        if (record.getIcount() != null) {
            sql.VALUES("icount", "#{icount,jdbcType=INTEGER}");
        }
        
        if (record.getBaseType() != null) {
            sql.VALUES("base_type", "#{baseType,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterialSpec() != null) {
            sql.VALUES("material_spec", "#{materialSpec,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.VALUES("distance", "#{distance,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialPrice() != null) {
            sql.VALUES("material_price", "#{materialPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCreateDate() != null) {
            sql.VALUES("create_date", "#{createDate,jdbcType=VARCHAR}");
        }
        
        if (record.getDate() != null) {
            sql.VALUES("date", "#{date,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitPrice() != null) {
            sql.VALUES("unit_price", "#{unitPrice,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialName() != null) {
            sql.VALUES("material_name", "#{materialName,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitFreightPrice() != null) {
            sql.VALUES("unit_freight_price", "#{unitFreightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getFreightPrice() != null) {
            sql.VALUES("freight_price", "#{freightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getStaffName() != null) {
            sql.VALUES("staff_name", "#{staffName,jdbcType=VARCHAR}");
        }
        
        if (record.getStaff() != null) {
            sql.VALUES("staff", "#{staff,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String selectByExample(MaterialReceivedExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("project");
        sql.SELECT("node");
        sql.SELECT("program");
        sql.SELECT("iprocedure");
        sql.SELECT("mechainc");
        sql.SELECT("supplier");
        sql.SELECT("supplier_name");
        sql.SELECT("material");
        sql.SELECT("plate_number");
        sql.SELECT("icount");
        sql.SELECT("base_type");
        sql.SELECT("material_spec");
        sql.SELECT("distance");
        sql.SELECT("material_price");
        sql.SELECT("create_date");
        sql.SELECT("date");
        sql.SELECT("unit_price");
        sql.SELECT("material_name");
        sql.SELECT("unit_freight_price");
        sql.SELECT("freight_price");
        sql.SELECT("staff_name");
        sql.SELECT("staff");
        sql.SELECT("remark");
        sql.FROM(Utils.getDatabase()+".material_received");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MaterialReceived record = (MaterialReceived) parameter.get("record");
        MaterialReceivedExample example = (MaterialReceivedExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("material_received");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getProject() != null) {
            sql.SET("project = #{record.project,jdbcType=INTEGER}");
        }
        
        if (record.getNode() != null) {
            sql.SET("node = #{record.node,jdbcType=VARCHAR}");
        }
        
        if (record.getProgram() != null) {
            sql.SET("program = #{record.program,jdbcType=VARCHAR}");
        }
        
        if (record.getIprocedure() != null) {
            sql.SET("iprocedure = #{record.iprocedure,jdbcType=VARCHAR}");
        }
        
        if (record.getMechainc() != null) {
            sql.SET("mechainc = #{record.mechainc,jdbcType=INTEGER}");
        }
        
        if (record.getSupplier() != null) {
            sql.SET("supplier = #{record.supplier,jdbcType=INTEGER}");
        }
        
        if (record.getSupplierName() != null) {
            sql.SET("supplier_name = #{record.supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterial() != null) {
            sql.SET("material = #{record.material,jdbcType=INTEGER}");
        }
        
        if (record.getPlateNumber() != null) {
            sql.SET("plate_number = #{record.plateNumber,jdbcType=VARCHAR}");
        }
        
        if (record.getIcount() != null) {
            sql.SET("icount = #{record.icount,jdbcType=INTEGER}");
        }
        
        if (record.getBaseType() != null) {
            sql.SET("base_type = #{record.baseType,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterialSpec() != null) {
            sql.SET("material_spec = #{record.materialSpec,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{record.distance,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialPrice() != null) {
            sql.SET("material_price = #{record.materialPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
        }
        
        if (record.getDate() != null) {
            sql.SET("date = #{record.date,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitPrice() != null) {
            sql.SET("unit_price = #{record.unitPrice,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialName() != null) {
            sql.SET("material_name = #{record.materialName,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitFreightPrice() != null) {
            sql.SET("unit_freight_price = #{record.unitFreightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getFreightPrice() != null) {
            sql.SET("freight_price = #{record.freightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getStaffName() != null) {
            sql.SET("staff_name = #{record.staffName,jdbcType=VARCHAR}");
        }
        
        if (record.getStaff() != null) {
            sql.SET("staff = #{record.staff,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("material_received");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("project = #{record.project,jdbcType=INTEGER}");
        sql.SET("node = #{record.node,jdbcType=VARCHAR}");
        sql.SET("program = #{record.program,jdbcType=VARCHAR}");
        sql.SET("iprocedure = #{record.iprocedure,jdbcType=VARCHAR}");
        sql.SET("mechainc = #{record.mechainc,jdbcType=INTEGER}");
        sql.SET("supplier = #{record.supplier,jdbcType=INTEGER}");
        sql.SET("supplier_name = #{record.supplierName,jdbcType=VARCHAR}");
        sql.SET("material = #{record.material,jdbcType=INTEGER}");
        sql.SET("plate_number = #{record.plateNumber,jdbcType=VARCHAR}");
        sql.SET("icount = #{record.icount,jdbcType=INTEGER}");
        sql.SET("base_type = #{record.baseType,jdbcType=VARCHAR}");
        sql.SET("material_spec = #{record.materialSpec,jdbcType=VARCHAR}");
        sql.SET("distance = #{record.distance,jdbcType=INTEGER}");
        sql.SET("material_price = #{record.materialPrice,jdbcType=INTEGER}");
        sql.SET("create_date = #{record.createDate,jdbcType=VARCHAR}");
        sql.SET("date = #{record.date,jdbcType=VARCHAR}");
        sql.SET("unit_price = #{record.unitPrice,jdbcType=INTEGER}");
        sql.SET("material_name = #{record.materialName,jdbcType=VARCHAR}");
        sql.SET("unit_freight_price = #{record.unitFreightPrice,jdbcType=INTEGER}");
        sql.SET("freight_price = #{record.freightPrice,jdbcType=INTEGER}");
        sql.SET("staff_name = #{record.staffName,jdbcType=VARCHAR}");
        sql.SET("staff = #{record.staff,jdbcType=INTEGER}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        
        MaterialReceivedExample example = (MaterialReceivedExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    public String updateByPrimaryKeySelective(MaterialReceived record) {
        SQL sql = new SQL();
        sql.UPDATE("material_received");
        
        if (record.getProject() != null) {
            sql.SET("project = #{project,jdbcType=INTEGER}");
        }
        
        if (record.getNode() != null) {
            sql.SET("node = #{node,jdbcType=VARCHAR}");
        }
        
        if (record.getProgram() != null) {
            sql.SET("program = #{program,jdbcType=VARCHAR}");
        }
        
        if (record.getIprocedure() != null) {
            sql.SET("iprocedure = #{iprocedure,jdbcType=VARCHAR}");
        }
        
        if (record.getMechainc() != null) {
            sql.SET("mechainc = #{mechainc,jdbcType=INTEGER}");
        }
        
        if (record.getSupplier() != null) {
            sql.SET("supplier = #{supplier,jdbcType=INTEGER}");
        }
        
        if (record.getSupplierName() != null) {
            sql.SET("supplier_name = #{supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterial() != null) {
            sql.SET("material = #{material,jdbcType=INTEGER}");
        }
        
        if (record.getPlateNumber() != null) {
            sql.SET("plate_number = #{plateNumber,jdbcType=VARCHAR}");
        }
        
        if (record.getIcount() != null) {
            sql.SET("icount = #{icount,jdbcType=INTEGER}");
        }
        
        if (record.getBaseType() != null) {
            sql.SET("base_type = #{baseType,jdbcType=VARCHAR}");
        }
        
        if (record.getMaterialSpec() != null) {
            sql.SET("material_spec = #{materialSpec,jdbcType=VARCHAR}");
        }
        
        if (record.getDistance() != null) {
            sql.SET("distance = #{distance,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialPrice() != null) {
            sql.SET("material_price = #{materialPrice,jdbcType=INTEGER}");
        }
        
        if (record.getCreateDate() != null) {
            sql.SET("create_date = #{createDate,jdbcType=VARCHAR}");
        }
        
        if (record.getDate() != null) {
            sql.SET("date = #{date,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitPrice() != null) {
            sql.SET("unit_price = #{unitPrice,jdbcType=INTEGER}");
        }
        
        if (record.getMaterialName() != null) {
            sql.SET("material_name = #{materialName,jdbcType=VARCHAR}");
        }
        
        if (record.getUnitFreightPrice() != null) {
            sql.SET("unit_freight_price = #{unitFreightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getFreightPrice() != null) {
            sql.SET("freight_price = #{freightPrice,jdbcType=INTEGER}");
        }
        
        if (record.getStaffName() != null) {
            sql.SET("staff_name = #{staffName,jdbcType=VARCHAR}");
        }
        
        if (record.getStaff() != null) {
            sql.SET("staff = #{staff,jdbcType=INTEGER}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table material_received
     *
     * @mbg.generated Sun Jan 28 21:12:17 CST 2018
     */
    protected void applyWhere(SQL sql, MaterialReceivedExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
    public String selectAllGroup(@Param("project")int project) {
        String sql = (new StringBuilder(
                "SELECT mr.`material_name` AS materialName, SUM(mr.`icount`) AS icount ,mr.`node` AS node,mr.`program` AS program,mr.`base_type` AS baseType FROM "))
                        .append(Utils.getDatabase()).append(".material_received mr WHERE mr.project = ").append(project)
                        .append(" GROUP BY mr.`material_name`,mr.`base_type`;").toString();
        return sql;
    }

    public String selectAllGroupByDate(@Param("project")int project, @Param("date") String date) {
        String sql = (new StringBuilder(
                "SELECT mr.`material_name` AS materialName, SUM(mr.`icount`) AS icount ,mr.`node` AS node,mr.`program` AS program,mr.`base_type` AS baseType FROM "))
                        .append(Utils.getDatabase()).append(".material_received mr WHERE mr.project = ").append(project)
                        .append(" AND mr.`date` ='").append(date).append("' GROUP BY mr.`material_name`,mr.`base_type`;").toString();
        return sql;
    }

}